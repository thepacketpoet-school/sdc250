-- Haley Archer

-- (15-2) Question 1:
-- Show an example of a UNION ALL.
SELECT 'APPLE' AS FRUIT FROM DUAL
UNION ALL
SELECT 'BANANA' FROM DUAL
UNION ALL
SELECT 'ORANGE' FROM DUAL;

-- (15-3) Question 2:
-- Count the number of lunches each employee will attend.
-- Get last name & first name using INNER JOIN.
-- Use UNION to include a row showing that you will not attend any lunches.
SELECT e.LAST_NAME, e.FIRST_NAME, COUNT(l.LUNCH_ID) AS TOTAL_LUNCHES
FROM L_EMPLOYEES e
JOIN L_LUNCHES l ON e.EMPLOYEE_ID = l.EMPLOYEE_ID
GROUP BY e.LAST_NAME, e.FIRST_NAME
UNION
SELECT 'ARCHER', 'HALEY', TO_NUMBER(0) FROM DUAL; 

-- (15-4) Question 3:
-- Show a UNION that uses a column name in ORDER BY.
SELECT TO_CHAR(EMPLOYEE_ID) AS ID, FIRST_NAME FROM L_EMPLOYEES
UNION
SELECT TO_CHAR(SUPPLIER_ID), TO_CHAR(MENU_ITEM) FROM L_FOODS
ORDER BY FIRST_NAME;

-- (15-4) Question 4:
-- Show a UNION that uses a column position in ORDER BY.
SELECT TO_CHAR(EMPLOYEE_ID) AS ID, FIRST_NAME FROM L_EMPLOYEES
UNION
SELECT TO_CHAR(SUPPLIER_ID), TO_CHAR(MENU_ITEM) FROM L_FOODS
ORDER BY 2;

-- (15-5) Question 5:
-- Create a VIEW defined using a UNION with ORDER BY.
CREATE OR REPLACE VIEW EMPLOYEES_AND_SUPPLIERS AS
SELECT TO_CHAR(EMPLOYEE_ID) AS ID, FIRST_NAME AS NAME FROM L_EMPLOYEES
UNION
SELECT TO_CHAR(SUPPLIER_ID), TO_CHAR(MENU_ITEM) FROM L_FOODS;

-- (15-5) Question 6:
-- Create a TABLE defined using a UNION with ORDER BY.
CREATE TABLE EMPLOYEE_SUPPLIER_TABLE AS
SELECT TO_CHAR(EMPLOYEE_ID) AS ID, FIRST_NAME AS NAME FROM L_EMPLOYEES
UNION
SELECT TO_CHAR(SUPPLIER_ID), TO_CHAR(MENU_ITEM) FROM L_FOODS;

-- (15-7) Question 7:
-- Use datatype conversion functions in a UNION.
SELECT TO_CHAR(EMPLOYEE_ID) AS ID, FIRST_NAME FROM L_EMPLOYEES
UNION
SELECT TO_CHAR(SUPPLIER_ID), TO_CHAR(MENU_ITEM) FROM L_FOODS;

-- (15-8) Question 8:
-- UNION of two tables with different numbers of columns.
SELECT TO_CHAR(EMPLOYEE_ID), FIRST_NAME, CAST(NULL AS VARCHAR2(20)) AS EXTRA_COLUMN FROM L_EMPLOYEES
UNION
SELECT TO_CHAR(SUPPLIER_ID), TO_CHAR(MENU_ITEM), TO_CHAR(DESCRIPTION) FROM L_FOODS;

-- (15-9) Question 9:
-- Test if two tables are identical.
SELECT 'MATCH' AS RESULT FROM DUAL
WHERE EXISTS (
    SELECT TO_CHAR(EMPLOYEE_ID), FIRST_NAME FROM L_EMPLOYEES
    INTERSECT
    SELECT TO_CHAR(EMPLOYEE_ID), FIRST_NAME FROM L_EMPLOYEES
)
UNION
SELECT 'NO MATCH' FROM DUAL
WHERE NOT EXISTS (
    SELECT TO_CHAR(EMPLOYEE_ID), FIRST_NAME FROM L_EMPLOYEES
    INTERSECT
    SELECT TO_CHAR(EMPLOYEE_ID), FIRST_NAME FROM L_EMPLOYEES
);

-- (15-10) Question 10:
-- UNION with literals to identify the source of each row.
SELECT TO_CHAR(EMPLOYEE_ID), FIRST_NAME, 'EMPLOYEE' AS SOURCE FROM L_EMPLOYEES
UNION
SELECT TO_CHAR(SUPPLIER_ID), TO_CHAR(MENU_ITEM), 'SUPPLIER' FROM L_FOODS;

-- (15-11) Question 11:
-- List foods and prices, marking "EXPENSIVE ITEM" for prices > $2.
SELECT DESCRIPTION, TO_CHAR(PRICE, '9999.99'), 
       CASE WHEN PRICE > 2.00 THEN 'EXPENSIVE ITEM' ELSE NULL END 
FROM L_FOODS 
ORDER BY 1;
